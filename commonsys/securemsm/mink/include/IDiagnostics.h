// Copyright (c) 2019-2020, 2022 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
/**
 * IDiagnostics is an interface enabling clients to obtain
 * diagnostic information.
 */
/** @cond */
#pragma once
// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"

typedef struct {
  uint32_t totalSize;
  uint32_t usedSize;
  uint32_t freeSize;
  uint32_t overheadSize;
  uint32_t wastedSize;
  uint32_t largestFreeBlockSize;
} IDiagnostics_HeapInfo;

typedef struct {
  uint64_t totalSize;
  uint64_t totalFree;
  uint64_t largestContigFree;
} IDiagnostics_AppRegionInfo;

typedef struct {
  uint32_t appStatus;
  uint32_t userStackSize;
  uint32_t elStackSize;
  uint32_t acceptBufSize;
  uint64_t physMemorySize;
} IDiagnostics_AppInfo;

typedef struct {
  uint64_t regs[31];
  uint64_t sp;
  uint64_t cpsr;
  uint64_t pc;
  uint64_t es_reg;
  uint64_t fa_reg;
  uint64_t apibkeyhi;
  uint64_t apibkeylo;
  uint64_t reserved[4];
} IDiagnostics_RegisterInfo;

#define IDiagnostics_APP_STATUS_IDLE UINT32_C(1)
#define IDiagnostics_APP_STATUS_ABORT UINT32_C(2)
#define IDiagnostics_APP_STATUS_BLOCKED UINT32_C(3)

#define IDiagnostics_ERROR_APP_NOT_FOUND INT32_C(10)
#define IDiagnostics_ERROR_ARCH_NOT_SUPPORTED INT32_C(11)
#define IDiagnostics_ERROR_RESTRICTED INT32_C(12)

#define IDiagnostics_OP_queryHeapInfo 0
#define IDiagnostics_OP_queryLoadedApps 1
#define IDiagnostics_OP_queryAppRegion 2
#define IDiagnostics_OP_queryAppInfo 3
#define IDiagnostics_OP_queryAppDump 4

static inline int32_t
IDiagnostics_release(Object self)
{
  return Object_invoke(self, Object_OP_release, 0, 0);
}

static inline int32_t
IDiagnostics_retain(Object self)
{
  return Object_invoke(self, Object_OP_retain, 0, 0);
}

static inline int32_t
IDiagnostics_queryHeapInfo(Object self, IDiagnostics_HeapInfo *heapInfo_ptr)
{
  ObjectArg a[1]={{{0,0}}};
  a[0].b = (ObjectBuf) { heapInfo_ptr, sizeof(IDiagnostics_HeapInfo) };

  return Object_invoke(self, IDiagnostics_OP_queryHeapInfo, a, ObjectCounts_pack(0, 1, 0, 0));
}

static inline int32_t
IDiagnostics_queryLoadedApps(Object self, void *loadedApps_ptr, size_t loadedApps_len, size_t *loadedApps_lenout)
{
  ObjectArg a[1]={{{0,0}}};
  a[0].b = (ObjectBuf) { loadedApps_ptr, loadedApps_len * 1 };

  int32_t result = Object_invoke(self, IDiagnostics_OP_queryLoadedApps, a, ObjectCounts_pack(0, 1, 0, 0));

  *loadedApps_lenout = a[0].b.size / 1;

  return result;
}

static inline int32_t
IDiagnostics_queryAppRegion(Object self, IDiagnostics_AppRegionInfo *pimemInfo_ptr, IDiagnostics_AppRegionInfo *ddrInfo_ptr, uint32_t *scatteredAllocatorSupport_ptr)
{
  ObjectArg a[3]={{{0,0}}};
  a[0].b = (ObjectBuf) { pimemInfo_ptr, sizeof(IDiagnostics_AppRegionInfo) };
  a[1].b = (ObjectBuf) { ddrInfo_ptr, sizeof(IDiagnostics_AppRegionInfo) };
  a[2].b = (ObjectBuf) { scatteredAllocatorSupport_ptr, sizeof(uint32_t) };

  return Object_invoke(self, IDiagnostics_OP_queryAppRegion, a, ObjectCounts_pack(0, 3, 0, 0));
}

static inline int32_t
IDiagnostics_queryAppInfo(Object self, const void *appDistName_ptr, size_t appDistName_len, IDiagnostics_AppInfo *appInfo_ptr)
{
  ObjectArg a[2]={{{0,0}}};
  a[0].bi = (ObjectBufIn) { appDistName_ptr, appDistName_len * 1 };
  a[1].b = (ObjectBuf) { appInfo_ptr, sizeof(IDiagnostics_AppInfo) };

  return Object_invoke(self, IDiagnostics_OP_queryAppInfo, a, ObjectCounts_pack(1, 1, 0, 0));
}

static inline int32_t
IDiagnostics_queryAppDump(Object self, const void *distName_ptr, size_t distName_len, IDiagnostics_RegisterInfo *usrRegInfo_ptr, void *usrStack_ptr, size_t usrStack_len, size_t *usrStack_lenout, uint64_t *usrStackAddr_ptr)
{
  ObjectArg a[4]={{{0,0}}};
  a[0].bi = (ObjectBufIn) { distName_ptr, distName_len * 1 };
  a[1].b = (ObjectBuf) { usrRegInfo_ptr, sizeof(IDiagnostics_RegisterInfo) };
  a[2].b = (ObjectBuf) { usrStack_ptr, usrStack_len * 1 };
  a[3].b = (ObjectBuf) { usrStackAddr_ptr, sizeof(uint64_t) };

  int32_t result = Object_invoke(self, IDiagnostics_OP_queryAppDump, a, ObjectCounts_pack(1, 3, 0, 0));

  *usrStack_lenout = a[2].b.size / 1;

  return result;
}
