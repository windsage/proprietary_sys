/*
 * Copyright (c) 2022 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc.
 */

package vendor.qti.hardware.limits@1.2;

import vendor.qti.hardware.limits@1.2::types;
import android.hardware.thermal@1.0::ThermalStatus;
import vendor.qti.hardware.limits@1.1::ILimits;

interface ILimits extends @1.1::ILimits {

  /**
   * Get thermal headroom for a given TemperatureType.
   *
   * @param type the TemperatureType such as CPU, GPU, SKIN etc.
   *        If given TemperatureType is not implemented(future use)
   *        OR not supported by given device, it returns failure.
   *
   * @param sample_count the number of sample count to be used for
   *        headroom calculation for a given TemperatureType.
   *        If it is zero, limits hal default sample count will be
   *        used. The sample count should be less than limits hal
   *        max supported sample count. If client requests more
   *        than or equal to max supported count, it will return
   *        default headroom value (INT_MAX).
   *        If limits hal doesn't have enough sample count to
   *        calculate headroom, it will retuen default headroom
   *        value in this case as well. It is client responsibilty
   *        to make sure that getCurrentThermalHeadRoom API will be
   *        called only after HAL collects required data samples.
   *
   * @param reserved parameter for future use.
   *
   * @return status: Status of the operation.
   *         Possible status codes:
   *         ThermalStatusCode.SUCCESS,
   *         ThermalStatusCode.FAILURE
   * @return headRoom: The estimated headroom in seconds
   */
  getCurrentThermalHeadRoom(TemperatureType type, uint32_t sample_count, int32_t reserved)
         generates (ThermalStatus status, double headRoom);
};
