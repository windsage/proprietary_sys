/*
 * Copyright (c) 2023 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc.
 */

package vendor.qti.hardware.soter;

import vendor.qti.hardware.soter.SoterErrorCode;
import vendor.qti.hardware.soter.SoterBufferReturn;
import vendor.qti.hardware.soter.SoterInitReturn;

/**
 * Soter service interface
 */
@VintfStability
interface ISoter {
    /**
     * Export the public key of ASK in x.509v3 format and signed with ATTK with given format.
     * \param[in] uid User Identifier means which app wants to generate ask_key_pair.
     * \param[out] buf the data assembled of public key data.
     */
    SoterErrorCode exportAskPublicKey(in int uid, out SoterBufferReturn buf);

    /**
     * Export the public key of ATTK in X.509v3 format.
     * \param[out] buf the public key data with X.509v3 format
     */
    SoterErrorCode exportAttkPublicKey(out SoterBufferReturn buf);

    /**
     * Export the public key of Auth Key in x.509v3 format and signed with ASK with given format.
     * \param[in] uid User Identifier means which app wants to generate auth_key_pair.
     * \param[in] name the name of the AuthKey.
     * \param[out] buf the data assembled of public key.
     */
    SoterErrorCode exportAuthKeyPublicKey(in int uid, in String name, out SoterBufferReturn buf);

    /**
     * finish sign. Sign the auth key defined in soter.
     * \param[in] session generated by SoterTA according to uid, name and challenge.
     * \param[out] buf result of signature.
     */
    SoterErrorCode finishSign(in long session, out SoterBufferReturn buf);

    /**
     * Generates a pair of ASK defined in SOTER. Save the private key into safe storage file and export the public key in x.509v3 format.
     * App can generate ask more than one time, and the new ask will replace the old ask which was generated last time.
     * \param[in] uid User Identifier means which app wants to generate ask_key_pair.
     */
    SoterErrorCode generateAskKeyPair(in int uid);

    /**
     * Generates a pair of ATTK defined in SOTER. Save the private key into RPMB and export the public key in
     * X.509v3 format. Note that the ATTK generated will never be touched outside the key master.
     * \param[in] copyNum the number of copies that will be saved in the RPMB. E.g. the ATTK generated will
     * be saved twice if the copy_num is 1.
     */
    SoterErrorCode generateAttkKeyPair(in byte copyNum);

    /**
     * Generated a pair of Auth key defined in soter(Authentication Key).
     * save the private key into safe storage file and export the public key in x.509v3 format.
     * App can generate auth key more than one time.
     * \param[in] uid User Identifier means which app wants to generate auth_key_pair.
     * \param[in] name the name of the AuthKey.
     */
    SoterErrorCode generateAuthKeyPair(in int uid, in String name);

    /**
     * Get the unique id.
     * \param[out] buf the device id data.
     * unique_id The unique id for each device, format as below:
     * 1.bytes 0-3: Identify each silicon provider id, defined by WeChat
     * 2.bytes 4-7: SoC model ID, defined by each silicon provider like Qualcomm and Trustonic
     * 3.bytes 8-15: Public Chip Serial *Number of SoC, defined by each silicon provider like Qualcomm and Trustonic
     * e.g 090000006795000012706b461410496b
     * We can use 09 to identify MTK or QC etc chips.
     * Use 6795 to identify different model
     * Use CSN to identify each device. NOTE: THE DEVICE ID IS CALSS-SENSITIVE
     */
    SoterErrorCode getDeviceId(out SoterBufferReturn buf);

    /**
     * Check if the ASK of a uid has been already created.
     * \param[in] uid User Identifier.
     */
    SoterErrorCode hasAskAlready(in int uid);

    /**
     * Check if the Auth Key of a name has been already.
     * \param[in] uid User Identifier.
     * \param[in] name the name of the AuthKey.
     */
    SoterErrorCode hasAuthKey(in int uid, in String name);

    /**
     * init sign
     * \param[in] uid User Identifier means which app wants to sign with auth_key.
     * \param[in] name the name of the AuthKey.
     * \param[in] challenge generated by 3rd app.
     */
    SoterInitReturn initSign(in int uid, in String name, in String challenge);

    /**
     * Remove the ASK defined in SOTER.
     * \param[in] uid User Identifier means which app wants to remove ask_key.
     */
    SoterErrorCode removeAllUidKey(in int uid);

    /**
     * Remove the Auth Key defined in soter.
     * \param[in] uid User Identifier means which app wants to remove auth_key.
     * \param[in] name the name of the AuthKey.
     */
    SoterErrorCode removeAuthKey(in int uid, in String name);

    /**
     * Verify the existance ATTK defined in SOTER.
     * Returns: 0 if the ATTK exists.
     */
    SoterErrorCode verifyAttkKeyPair();
}
