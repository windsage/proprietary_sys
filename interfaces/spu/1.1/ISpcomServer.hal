/*!
 *
 * Copyright (c) 2019-2020 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc.
 *
 */

package vendor.qti.spu@1.1;

import @1.0::ISpcomSharedBuffer;
import @1.0::ISpcomSSREvent;

// Generated by ISpcom::getSpcomServer()

interface ISpcomServer {

    /**
     * Create SPCOM channel and register as server
     *
     * @return  error  zero on success, non zero otherwise (see errno.h)
     */
    registerServer() generates (int32_t error);

     /**
     * Unregister SPCOM server channel
     *
     * @return  error  zero on success, nonzero otherwise (see errno.h)
     */
    unregisterServer() generates(int32_t error);

    /**
     * Wait for a request buffer from SPU client application and get the request
     * buffer
     *
     * Synchronous API to get request buffer from SPCOM client
     *
     * @return  request  request buffer
     * @return  error    zero on success, nonzero otherwise (see errno.h)
     */
    waitForRequest() generates (vec<uint8_t> request, int32_t error);

    /**
     * Send response to client
     *
     * Must be called after getting a request
     *
     * @param   response  response buffer
     *
     * @return  error     zero on success, nonzero otherwise (see errno.h)
     */
    sendResponse(vec<uint8_t> response) generates (int32_t error);

    /**
     * Get an instance of SPU shared buffer object with direct access to
     * shared buffer
     *
     * @param   mem               HAL shared memory allocated and mapped by
     *                            HAL client
     * @return  ISPUSharedBuffer  shared buffer to be shared with SPU by
     *                            sending modified command, nullptr on failure
     */
    getSpcomSharedBuffer(memory mem) generates (ISpcomSharedBuffer buffer);

    /**
     * Send a reaponae with shared buffer physical address in predefined offset
     *
     * @param  response      response buffer
     * @param  sharedBuffer  shared buffer to share with spcom server
     *
     * @return  error     zero on success, nonzero otherwise (see errno.h)
     */
    sendSharedBufferResponse(vec<uint8_t> response, ISpcomSharedBuffer
        sharedBuffer, uint32_t offset) generates (int32_t error);
};