/*!
 *
 * Copyright (c) 2019-2020 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc.
 *
 */

package vendor.qti.spu@1.1;

// Generated by ISpcom::getISPUInfo()

interface ISPUInfo {

    /**
     * Get ARI lifecycle state
     *
     * @return  error  zero for success, nonzero otherwise (see errno.h)
     * @return  state  ARI lifecycle status
     */
    getARILifecycleState() generates (int32_t error, SPUARILifecycleState state);

    /**
     * Get FIPS mode (enabled / disabled)
     *
     * @return  error          zero for success, nonzero otherwise
                               (see errno.h)
     * @return  isFipsEnabled  true if enabled, false otherwise
     */
    isFipsEnabled() generates (int32_t error, bool isFipsEnabled);

    /**
     * Get FIPS test status
     *
     * @return  error                 zero for success, nonzero otherwise
                                      (see errno.h)
     * @return  isFipsSelfTestPassed  true if passed, false otherwise
     */
    isFipsSelfTestPassed() generates (int32_t error, bool isFipsSelfTestPassed);

    /**
     * Get sensors calibration status
     *
     * @return  error                zero for success, nonzero otherwise
                                     (see errno.h)
     * @return  isSensorsCalibrated  true if calibrated, false otherwise
     */
    isSensorsCalibrated() generates (int32_t error, bool isSensorsCalibrated);

    /**
     * Get POR indicator of last boot - available only when ARI in enabled
     *
     * @return  error         zero for success, nonzero otherwise (see errno.h)
     * @return  porIndicator  false for normal boot (no UVLO) true for boot
     *                        after complete power lose (UVLO)
     */
    isPOR() generates (int32_t error, bool porIndicator);

    /**
     * Get POR indicator counter - available only when ARI in enabled
     *
     * @return  error       zero for success, nonzero otherwise (see errno.h)
     * @return  porCounter  POR counter
     */
    getPORCounter() generates (int32_t error, uint32_t porCounter);

    /**
     * Check IAR cryptographic erase occurred during SPU firmware loading
     *
     * @return  error    zero for success, nonzero otherwise (see errno.h)
     * @return  isIARCe  true if occurred, false otherwise
     */
    isIARCe() generates (int32_t error, bool isIARCeFirmware);

    /**
     * Get SPU build version
     *
     * @return  error  zero for success, nonzero otherwise (see errno.h)
     * @return  major  build version major
     * @return  minor  build version minor
     * @return  hash   last commit hash
     */
    getBuildVersion() generates (int32_t error, uint16_t major, uint16_t minor,
        uint32_t hash);

    /**
     * Get SPU application version
     *
     * @param uuid hexadecimal representation of 4 first bytes of SPU app UUID
     *             in big-endian form
     *
     * @return  error  zero for success, nonzero otherwise (see errno.h)
     * @return  major  build version major
     * @return  minor  build version minor
     * @return  hash   last commit hash
     */
    getAppVersion(uint32_t uuid) generates (int32_t error, uint16_t major,
        uint16_t minor, uint32_t hash);

    /**
     * Get SPU HW version from fuse
     *
     * @return  error    zero for success, nonzero otherwise (see errno.h)
     * @return  version  SP HW version
     */
    getHwVersion() generates (int32_t error, uint32_t version);

    /**
     * Get FIPS override fuse status
     *
     * @return  error     zero for success, nonzero otherwise (see errno.h)
     * @return  override  true if blown, false otherwise
     */
    isFipsOverride() generates (int32_t error, bool override);

    /**
     * Get SPU image type: Platform type and ROM version
     *
     * @return  type  SPU image type
     */
     getImageType() generates (SPUImageType type);

     /**
      * Gets SPU IAR state
      *
      * @return  error  zero for success, nonzero otherwise (see errno.h)
      * @retuen  state  SPU IAR lifecycle state
      */
     getIARState() generates (int32_t error, SPUIARState state);

     /**
      * Gets SPU ARI suspension state
      *
      * @return  error  zero for success, nonzero otherwise (see errno.h)
      * @retuen  state  SPU IAR suspension state
      */
     getSPUARISuspensionState() generates
         (int32_t error, SPUARISuspensionState state);

     /**
      * Get precentage of ARI unblown fuses
      *
      * @return  error       zero for success, nonzero otherwise (see errno.h)
      * @return  precentage  Unblown ARI fuses percentage
      */
     getARIUnblownFusePct() generates (int32_t error, uint32_t percentage);

     /**
      * Get SPCOM max message size
      *
      * @return size  SPCOM max message size
      */
     getSpcomMaxMessageSize() generates (uint32_t size);

     /**
      * Get SPCOM max channel name length (including null terminator)
      *
      * @return length  SPCOM max channel name length
      */
     getSpcomMaxChannelNameLength() generates (uint32_t length);
};
