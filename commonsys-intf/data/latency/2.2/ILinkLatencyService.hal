/*
 * Copyright (c) 2021-2022 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc.
 */

package vendor.qti.latency@2.2;

import @2.1::ILinkLatencyService;
import @2.0::Level;
import ILinkLatencyIndication;

/**
 * This is the root of the HAL module and is the interface returned when
 * loading an implementation of the IFactory HAL.
 */
interface ILinkLatencyService extends @2.1::ILinkLatencyService {
    /**
     * Sets the callback for the client. Necessary to add/remove filters and get
     * updates on filter status.
     *
     * @param callback The async class for sending indications and responses back to client.
     */
    @entry
    @callflow(next={"*"})
    oneway setCallback(ILinkLatencyIndication callback);

    /**
     * Called by the client to deinitialize the effect and free up
     * all the currently allocated resources. It is recommended to close
     * the effect on the client side as soon as it is becomes unused.
     *
     * @return status OK in case the success. INVALID_STATE if the effect was already closed.
     *
     */
    @callflow(next={"*"})
    addFilter(Filter filter) generates (StatusCode status, uint32_t filterId);

    /**
     * Returns a vector of FilterInfo objects corresponding to the Filters added by the client.
     *
     * @return vector of Filter ID's and Status' for every filter added by the client.
     */
    @callflow(next={"*"})
    getFilters() generates (vec<FilterInfo> flows);

    /**
     * Called by the client to update uplink latency level for a filter.
     *
     * @return status OK in case the success. INVALID_ARGUMENTS if the filterId does not match.
     *
     */
    @callflow(next={"*"})
    updatelinkLatencyLevel(uint32_t filterId, Level uplink_level, Level downlink_level) generates (StatusCode status);

    /**
     * Called by the client to update OOD status for a filter
     *
     * @return status OK in case the success. INVALID_ARGUMENTS if the filterId does not match.
     *
     */
    @callflow(next={"*"})
    updateOODStatus(uint32_t filterId, OodStatus ood) generates (StatusCode status);

    /**
     * Called by the client to update pdcp discard timer for a filter
     *
     * @return status OK in case the success. INVALID_ARGUMENTS if the filterId does not match.
     *
     */
    @callflow(next={"*"})
    updatePdcpDiscardTimer(uint32_t filterId, uint64_t timer) generates (StatusCode status);

    /**
     * Deletes the specific Filter if added by the client.
     *
     * Response for deleted Filter is @1.0::ILinkLatencyIndication().filterStatus().
     *
     * @param filterId ID for the Filter to be deleted.
     *
     * @return status StatusCode of the call, which may be:
     *   - `OK`               - Filter will be deleted. Status after deletion will be
     *                          sent via @2.2::ILinkLatencyIndication().flowStatus().
     *                          @2.2::ILinkLatencyIndication().flowStatus().
     *   - `CALLBACK_NOT_SET` - @2.2::ILinkLatencyIndication has not been set.
     *   - `INVALID_ARGUMENTS`- filterId is not valid.
     *
     */
    @callflow(next={"*"})
    deleteFilter(int32_t filterId) generates (StatusCode status);

    /**
     * Deletes all Filters added by the client.
     *
     * Each deleted Filter will have a seperate response from
     * @2.2::ILinkLatencyIndication().filterStatus().
     *
     * @return status StatusCode of the call, which may be:
     *   - `OK`               - Flows will be deleted. Status after deletion will be
     *                          sent via @2.2::ILinkLatencyIndication().flowStatus().
     *   - `CALLBACK_NOT_SET` - @2.2::ILinkLatencyIndication has not been set.
     *
     */
    @callflow(next={"*"})
    deleteAllFilters() generates (StatusCode status);

    /**
     * Enables/Disables out of order delivery.
     *
     * @return status StatusCode of the call, which may be:
     *   - `OK`               - OOD was enabled/disabled.
     *
     */
    @callflow(next={"*"})
    updateOodForDDS(OodStatus ood) generates (StatusCode status);

    /**
     * Sets the PDCP discard timer value.
     *
     * @return status StatusCode of the call, which may be:
     *   - `OK`               - PDCP discard timer value correctly set.
     *
     */
    @callflow(next={"*"})
    updatePdcpDiscardTimerForDDS(uint64_t timerValue) generates (StatusCode status);

    /**
     * Provides uninterrupted gaming experience. Enables absolute prioritization
     * of default data subscription(by suspending other subscription).
     *
     * @param: enable or disable this feature.
     */
    @callflow(next={"*"})
    oneway enableHighPerformanceGaming(bool isEnable);
};
