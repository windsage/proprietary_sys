/*
 * Copyright (c) 2021-2022 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc.
 */

package vendor.qti.latency@2.2;

import @2.1::StatusCode;
import @2.0::Level;
import android.hidl.safe_union@1.0::Monostate;

/**
 * Return values for ILatencyService requests
 */
enum StatusCode : @2.1::StatusCode {
    CALLBACK_NOT_SET,
};

/**
 * Possible Filter Status values.
 */
enum FilterStatus : uint64_t {
    FILTER_INACTIVE,
    FILTER_ACTIVE,
    FILTER_INACTIVITY_TIMEOUT,
    FILTER_DELETED,
    ERROR_DUPLICATE_FILTER,
    ERROR_FILTER_LIMIT_REACHED,
    ERROR_INTERNAL,
    ERROR_INVALID_ARGS,
    ERROR_IP_TYPE_MISMATCH,
    ERROR_INACTIVITY_TIMEOUT_INVALID,
    ERROR_DST_PORT_INVALID,
    ERROR_SRC_PORT_INVALID,
    ERROR_DST_IP_INVALID,
    ERROR_SRC_IP_INVALID,
};

/**
 * IPv4/v6 address union.
 */
safe_union IpAddress {
    /**
     * 0.0.0.0 is invalid. should be ignored.
     */
    uint8_t[4] v4;

    /**
     * 0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0 is invalid. should be ignored.
     */
    uint8_t[16] v6;
};

/**
 * IPv4 type of service value and mask.
 */
struct Tos {
    uint8_t val;
    uint8_t mask;
};

/**
 * IPv6 traffic class struct for value and mask.
 */
struct TrafficClass {
    uint8_t val;
    uint8_t mask;
};

/**
 * IPv6 flow marking for traffic class and flow label.
 */
struct V6Mark {
    TrafficClass trafficClass;
    uint32_t flowLabel;
};

/**
 * Union so only IPv4 or IPv6 filter marking can be used per filter.
 */
safe_union FlowMark {
    /**
    * TOS is only for IPv4 flows.
    */
    Tos tos;

    /**
    * IPv6 can have traffic class and/or filter label.
    */
    V6Mark v6;
};

/**
 * Enum values for filter protocols.
 */
enum Protocol : uint64_t {
    NONE,
    TCP,
    UDP,
    TCPUDP
};

/**
 * Enum values for OOD status.
 */
enum OodStatus : uint64_t {
  UNSPECIFIED = 0, // APP doesn't care if ood is enabled or disabled
  ENABLED,  // APP requests OOD
  DISABLED, // APP does not support OOD. OOD will be disabled on the whole sub in this case.
};

/**
 * Data structure for Filter parameters.
 *
 * @field srcIp source IpAddress.
 * @field srcPort source port.
 * @field dstIp destination IpAddress.
 * @field dstPort destination port.
 * @field protocol Uplink queue size in bytes.
 * @field mark union for v4 or v6 marking.
 * @field uplink_level uplink latency level.
 * @field downlink_level downlink latency level.
 * @field pdcp_timer pdcp discard timer in millisecs.
 * @field ood OOD Status.
 */
struct Filter {
    IpAddress srcIp;
    uint16_t srcPort;
    IpAddress dstIp;
    uint16_t dstPort;
    Protocol protocol;
    FlowMark mark;
    Level uplink_level;
    Level downlink_level;
    uint64_t pdcp_timer;
    OodStatus ood;
};

/**
 * Data structure used by @2.2::ILinkLatencyIndication.filterStatus() and
 * @2.2::ILinkLatency.getFilters().
 *
 * @field filterId Id associated with the given filter.
 * @field status Current FilterStatus for the filter.
 */
struct FilterInfo {
    uint32_t filterId;
    FilterStatus status;
    safe_union UplinkLatencyLevel{
        Monostate noinit;
        Level value;
    }uplink_level;
    safe_union DownlinkLatencyLevel{
        Monostate noinit;
        Level value;
    }downlink_level;
    safe_union PDCPDiscarTimer{
        Monostate noinit;
        uint32_t value;
    }pdcp_timer;
    safe_union OOD{
        Monostate noinit;
        OodStatus value;
    }ood;
};
