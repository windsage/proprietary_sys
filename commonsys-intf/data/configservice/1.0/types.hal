/********************************:*************************************
Copyright (c) 2021 Qualcomm Technologies, Inc.
All Rights Reserved.
Confidential and Proprietary - Qualcomm Technologies, Inc.
**********************************************************************/

package vendor.qti.ims.configservice@1.0;

/**
 * Status code for client commands and APIs
 */

enum RequestStatus : int32_t {
    /** Client command UNSUPPORTED */
    UNSUPPORTED     = -1,
    /** Client command succeeded */
    OK              = 0,
    /** Decompression of config failed */
    DECODING_ERROR  = 1,
    /** Configuration XML format Invalid */
    INVALID_CONTENT = 2,
    /** Client command Failed */
    FAIL            = 3,
    /** Client command status is in progress */
    IN_PROGRESS     = 4
};

/**
 * The RCS configuration data should be an xml file
 * taken from the <RCSConfig> section of the device/carrier config xml.
 * It may be passed as a uint8_t buffer.
 * isCompressed Flag is required to be True if data is compressed.
 * Only gzip compression is supported.
 */
struct ConfigData {
    bool isCompressed;
    vec<uint8_t> config;
};

enum SettingsId : uint32_t {
    PRESENCE_CONFIG,
    STANDALONE_MESSAGING_CONFIG,
    USER_AGENT_STRING,
    IMS_SERVICE_ENABLE_CONFIG
};

struct KeyValuePairTypeBool{
    uint32_t key;
    bool value;
};

struct KeyValuePairTypeInt{
    uint32_t key;
    uint64_t value;
};

struct KeyValuePairTypeString {
    uint32_t key;
    string value;
};

/** Properties that can be set using PRESENCE_CONFIG */
enum PresenceConfigKeys : uint32_t {

    /** This key expects uint32_t value */
    PUBLISH_TIMER_KEY = 100,

    /** This key expects uint32_t value */
    PUBLISH_EXTENDED_TIMER_KEY,

    /** This key expects uint32_t value */
    PUBLISH_SRC_THROTTLE_TIMER_KEY,

    /** This key expects uint32_t value */
    PUBLISH_ERROR_RECOVERY_TIMER_KEY,

    /** This key expects uint32_t value */
    LIST_SUBSCRIPTION_EXPIRY_KEY,

    /** This key expects uint32_t value */
    CAPABILITES_CACHE_EXPIRY_KEY,

    /** This key expects uint32_t value */
    AVAILABILITY_CACHE_EXPIRY_KEY,

    /** This key expects uint32_t value */
    CAPABILITY_POLL_INTERVAL_KEY,

    /** This key expects uint32_t value */
    MAX_ENTIES_IN_LIST_SUBSCRIBE_KEY,

    /** This key expects uint8_t value, expects 0 or 1 */
    CAPABILITY_DISCOVERY_ENABLED_KEY,

    /** This key expects uint8_t value, expects 0 or 1 */
    GZIP_ENABLED_KEY,

    /** This key expects string value */
    USER_AGENT_KEY
};

/**
 * Properties that can be set using STANDALONE_MESSAGING_CONFIG
 */
enum StandaloneMessagingConfigKeys : uint32_t {

    /** This key expects uint8_t value */
    DEFAULT_SMS_APP_KEY = 300,

    /** This key expects uint8_t value */
    DEFAULT_VVM_APP_KEY,

    /** This key expects string value */
    AUTO_CONFIG_USER_AGENT_KEY,

    /** This key expects string value */
    XDM_CLIENT_USER_AGENT_KEY,

    /** This key expects string value */
    CLIENT_VENDOR_KEY,

    /** This key expects string value */
    CLIENT_VERSION_KEY,

    /** This key expects string value */
    TERMINAL_VENDOR_KEY,

    /** This key expects string value */
    TERMINAL_MODEL_KEY,

    /** This key expects string value */
    TERMINAL_SW_VERSION_KEY,

    /** This key expects string value */
    RCS_VERSION_KEY,

    /** This key expects string value */
    PROVISIONING_VERSION_KEY,

    /** This key expects string value */
    FRIENDLY_DEVICE_NAME_KEY,

    /** This key expects string value */
    RCS_PROFILE_KEY,

    /** This key expects string value */
    BOT_VERSION_KEY

};

/**
 * Properties that can be set using USER_AGENT_STRING
 */
enum UserAgentStringKeys : uint32_t {

    /** This key expects string value */
    IMS_USER_AGENT_KEY = 200
};

/**
 * Properties that can be set using IMS_SERVICE_ENABLE_CONFIG
 */
enum ImsServiceEnableConfigKeys : uint32_t {

    /** This key expects uint8_t value, expects 0 or 1 */
    VOLTE_ENABLED_KEY = 400,

    /** This key expects uint8_t value, expects 0 or 1 */
    VIDEOTELEPHONY_ENABLED_KEY,

    /** This key expects uint8_t value, expects 0 or 1 */
    MOBILE_DATA_ENABLED_KEY,

    /** This key expects uint8_t value, expects 0 or 1 */
    WIFI_CALLING_ENABLED_KEY,

    /** This key expects uint8_t value, expects 0 or 1 */
    WIFI_CALLING_IN_ROAMING_ENABLED_KEY,

    /** This key expects uint8_t value, expects 0 or 1 */
    IMS_SERVICE_ENABLED_KEY,

    /** This key expects uint8_t value, expects 0 or 1 */
    UT_ENABLED_KEY,

    /** This key expects uint8_t value, expects 0 or 1 */
    SMS_ENABLED_KEY,

    /** This key expects uint8_t value, expects 0 or 1 */
    DAN_ENABLED_KEY,

    /** This key expects uint8_t value, expects 0 or 1 */
    USSD_ENABLED_KEY,

    /** This key expects uint8_t value, expects 0 or 1 */
    MWI_ENABLED_KEY,

    /** This key expects uint8_t value, expects 0 or 1 */
    PRESENCE_ENABLED_KEY,

    /** This key expects uint8_t value, expects 0 or 1 */
    AUTOCONFIG_ENABLED_KEY,

    /** This key expects uint8_t value, expects 0 or 1 */
    XDM_CLIENT_ENABLED_KEY,

    /** This key expects uint8_t value, expects 0 or 1 */
    RCS_MESSAGING_ENABLED_KEY,

    /** This key expects uint8_t value, expects 0 or 1 */
    CALL_MODE_PREF_ROAM_ENABLED_KEY,

    /** This key expects uint8_t value, expects 0 or 1 */
    RTT_ENABLED_KEY,

    /** This key expects uint8_t value, expects 0 or 1 */
    CARRIER_CONFIG_ENABLED_KEY,

    /** This key expects string value */
    WIFI_PROVISIONING_ID_KEY,

    /** This key expects uint32_t value */
    CALL_MODE_PREFERENCE_KEY,

    /** This key expects uint32_t value */
    CALL_MODE_ROAM_PREFERENCE_KEY,

    /** This key expects uint64_t value */
    SERVICE_MASK_BY_NETWORK_ENABLED_KEY,

    /** This key expects uint8_t value, expects 0 or 1 */
    OPTIONS_ENABLED_KEY,

    /** This key expects uint8_t value, expects 0 or 1 */
    CALL_COMPOSER_ENABLED_KEY

};

struct SettingsValues {
    vec<KeyValuePairTypeBool>    boolData;
    vec<KeyValuePairTypeInt>     intData;
    vec<KeyValuePairTypeString>  stringData;
};

struct SettingsData {
    SettingsId settingsId;
    SettingsValues settingsValues;
};

struct UceCapabilityInfo {
    bool isPresenceEnabled;
    bool isOptionsEnabled;
};

/**
 * Status codes for updateAppTokenFetchStatus API
 */
enum StatusCode : uint32_t {
    /** Operation succeeded */
    SUCCESS = 0,
    /** Operation failed */
    FAILED,
    /** Operation initiated and in progress */
    IN_PROGRESS,
    /** Client is not authorised to perform operation */
    SECURITY_FAILURE,
    /** Invalid/unknown uri/parameter provided for operation */
    ILLEGAL_PARAM,
    /** Client permissions or other internal error condition */
    ILLEGAL_STATE,
    /** Indicates the Login Engine is not installed/available */
    NULL_CURSOR,
    /** Oem Client not available */
    APP_NOT_AVAILABLE
};

/**
 * Supported Token types
 */
enum TokenType : uint32_t {
    /** APP token*/
    IMS_APP_TOKEN = 0,
    /** Auth token */
    IMS_AUTH_TOKEN = 1,
    /** Client token */
    IMS_CLIENT_TOKEN = 2
};

/**
 * Token Request Trigger Reasons
 */
enum TokenRequestReason : uint32_t {
    /** No Reason */
    REASON_DO_NOT_EXIST           = 0,
    /** Token doesn't exist */
    REASON_RCS_TOKEN_DO_NOT_EXIST = 1,
    /** Sim swap happened */
    REASON_SIM_SWAP               = 2,
    /** Token exist but it is invalid */
    REASON_INVALID_TOKEN          = 3,
    /** Token exist but it expired */
    REASON_EXPIRED_TOKEN          = 4,
    /** Client has changed */
    REASON_CLIENT_CHANGE          = 5,
    /** Device upgrade took place */
    REASON_DEVICE_UPGRADE         = 6,
    /** Factory reset happened */
    REASON_FACTORY_RESET          = 7
};

/* autoconfiguration related params */

/*
 * AutoConfig Definition Type
 */
enum AutoConfigRequestType : uint32_t {
  SERVER_UPDATE,
  CLIENT_REQUEST
};

/*
 * AutoConfig Data Type
 */
struct AutoConfig {
  /* AutoConfigRequestType */
  uint32_t autoConfigRequestType;
  /* configXml sent with compressed status */
  ConfigData configData;
};

/*
 * Autoconfig trigger reason types
 */
enum AutoConfigTriggerReason : int32_t {
  AUTOCONFIG_UNSPECIFIED = -1,
  /* reason not supported/unspecified */
  AUTOCONFIG_DEFAULT = 0,
  /* default reason code */
  AUTOCONFIG_INVALID_TOKEN = 1,
  /* Token becomes invalid*/
  AUTOCONFIG_INVALID_CREDENTIAL = 2,
  /* Username/password/URL becomes invalid */
  AUTOCONFIG_CLIENT_CHANGE = 3,
  /* RCS client has been changed */
  AUTOCONFIG_DEVICE_UPGRADE = 4,
  /* Device has been upgraded */
  AUTOCONFIG_FACTORY_RESET = 5
  /* Factory reset */
};

struct AutoConfigResponse {
    /** SIP/HTTP response code */
    uint16_t statusCode;
    /** SIP/HTTP response reason phrase */
    string reasonPhrase;
};
