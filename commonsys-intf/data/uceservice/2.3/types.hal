/*********************************************************************
 Copyright (c) 2020 Qualcomm Technologies, Inc.
 All Rights Reserved.
 Confidential and Proprietary - Qualcomm Technologies, Inc.
**********************************************************************/

package com.qualcomm.qti.uceservice@2.3;

import @2.0::types;
import @2.1::types;
import @2.2::types;

/**
 * RCS (Rich Client Suite) Feature description,
 * specifies a specific feature and version, as specified in GSMA RCS 7.0.
 */
struct FeatureDesc {
    /**
     * RCS feature tag provided by network.
     * Format of featureTag described in GSMA RCS 5.3 documentation
     */
    string featureTag;
    /**
     * RCS Feature version string.
     * Format of version desribed in GSMA RCC.07 v11.0
     * Example: +g.gsma.rcs.botversion="#=1,#=2"
     * Version string may be null for features not supporting version in tag
     */
    string version;
};

/** RCS (Rich Client Suite) Features supported on device,
 *  as specified in GSMA RCS 7.0.
 */
struct CapabilityInfo {
    /** Instant Message session feature support. */
    bool imSupported;

    /** File transfer feature support. */
    bool ftSupported;

    /** File transfer Thumbnail feature support. */
    bool ftThumbSupported;

    /** File transfer Store and forward feature support. */
    bool ftSnFSupported;

    /** File transfer over HTTP feature support. */
    bool ftHttpSupported;

    /** Image sharing feature support. */
    bool imageShareSupported;

    /** Video sharing during a CS call support -- IR-74. */
    bool videoShareDuringCSSupported;

    /** Video sharing outside of voice call support -- IR-84. */
    bool videoShareSupported;

    /** Social presence feature support. */
    bool socialPresenceSupported;

    /** Presence discovery feature support. */
    bool capDiscViaPresenceSupported;

    /** IP voice call feature support (IR-92/IR-58). */
    bool ipVoiceSupported;

    /** IP video call feature support (IR-92/IR-58). */
    bool ipVideoSupported;

    /** IP Geo location Pull using File Transfer feature support. */
    bool geoPullFtSupported;

    /** IP Geo location Pull feature support. */
    bool geoPullSupported;

    /** IP Geo location Push feature support. */
    bool geoPushSupported;

    /** Standalone messaging feature support. */
    bool smSupported;

    /** Full Store and Forward Group Chat information feature. */
    bool fullSnFGroupChatSupported;

    /** RCS IP Voice call feature support.  */
    bool rcsIpVoiceCallSupported;

    /** RCS IP Video call feature support.  */
    bool rcsIpVideoCallSupported;

    /** RCS IP Video call feature support.  */
    bool rcsIpVideoOnlyCallSupported;

    /** IP Geo SMS support. */
    bool geoSmsSupported;

    /** Call Composer feature support. */
    bool callComposerSupported;

    /** Post Call Information feature support. */
    bool postCallSupported;

    /** Shared Map feature support. */
    bool sharedMapSupported;

    /** Shared Sketch feature support. */
    bool sharedSketchSupported;

    /** Chatbot feature support. */
    bool chatBotSupported;

    /** Chatbot role support. */
    bool chatBotRoleSupported;

    /** MMtel Call Composer feature support. */
    bool mmtelCallComposerSupported;

     /** Standalone feature support. */
    bool standaloneChatbotSupported;

    /**
     * List of supported extensions.
     * used for custom Feature Tags
     * Please refer to GSMA RCS 7.1 documentation
     * for the format of feature Tags
     */
    vec<string> mExts;

    /* Above fields kept for backwards compatibility only */

    /**
     * List of features and versions supported on device.
     * All feature tags and extension feature tags supported will be part of
     * this list.
     */
    vec<FeatureDesc> featureTagData;

    /** Time used to compute when to query again.
     *  Wallclock time of format type NTP (Network Time Protocol)
     */
    int64_t capTimestamp;

};

struct PresenceCapabilityInfo {
    /** SIP or TEL URI of the contact
     * the type of URI is dependent on the network.
     */
    string contactUri;
    /* RCS capabilites of the contact */
    CapabilityInfo capInfo;
};

struct PresTupleInfo {
    /** RCS feature tag provided by network.
        Format of featureTag described in
        GSMA RCS 5.3 documentation */
    string featureTag;
    /** SIP or TEL URI of the contact
     * the type of URI is dependent on the network.
     */
    string contactUri;
    /** Wallclock time of format type NTP (Network Time Protocol) */
    string timestamp;
    /** version of featureTag used */
    string ftVersion;
};

struct PresResInstanceInfo {
    /** capability polling state on network */
    ResInstantceState resInstanceState;
    /** network generated ID alpha numeric string */
    string id;
    /** network generated reason */
    string reason;
    /** SIP or TEL URI of the contact
     * the type of URI is dependent on the network.
     * this is generated by network
     */
    string presentityUri;
    /** array of RCS features supported */
    vec<PresTupleInfo> mTupleInfoArray;
};

struct PresResInfo {
    /** SIP or TEL URI of the contact
     * the type of URI is dependent on the network.
     */
    string resUri;
    /** network preferred contact name
     *  this is usually the phone number
     */
    string displayName;
    PresResInstanceInfo instanceInfo;
};

struct PresSipResponse {
    /** command ID to map to the request API in IPresenceService */
    PresenceCmdId cmdId;
    /** request ID generated by presence service
     *  this is notified in IPresenceListener.cmdStatus() API
     */
    int32_t requestId;
    /** network generated error code
     *  this is compliant to  RFC 3261
     */
    uint16_t sipResponseCode;
    /** time to retry in secs
     *  this is also network generated
     */
    uint16_t retryAfter;
    /** network generated phrase in combination to error code
     *  this is compliant to  RFC 3261
     */
    string reasonPhrase;
    /** network generated header in combination to error code
     *  this is compliant to  RFC 3261
     */
    string reasonHeader;
};

struct OptionsCapabilityInfo {
    /** the SDP(Session Description Protocol) packet. */
    string          sdp;
    /** RCS features supported by remote party */
    CapabilityInfo  capInfo;
};

struct OptionsCmdStatus {
    /* Command ID */
    OptionsCmdId cmdId;
    /* status code */
    UceStatusCode status;
    /* token generated by the client */
    int64_t userData;
    /* RCS capabilities */
    OptionsCapabilityInfo capInfo;
};

struct OptionsSipResponse {
    /* Command ID */
    OptionsCmdId cmdId;
    /* request ID to identify API Request */
    int32_t requestId;
    /** network generated error code
     *  this is compliant to  RFC 3261
     */
    uint16_t sipResponseCode;
    /** time to retry in secs
     *  this is also network generated
     */
    uint16_t retryAfter;
    /** network generated phrase in combination to error code
     *  this is compliant to  RFC 3261
     */
    string reasonPhrase;
    /** network generated header in combination to error code
     *  this is compliant to  RFC 3261
     */
    string reasonHeader;
};
